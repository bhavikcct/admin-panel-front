import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useFieldArray, } from "react-hook-form";
const SectionField = ({ sectionIndex, sectionCount, control, register, errors, removeSection, }) => {
    const { fields: itemFields, append: appendItem, remove: removeItem, } = useFieldArray({
        control,
        name: `sections.${sectionIndex}.items`,
    });
    return (_jsxs("div", { className: "border p-4 rounded space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsxs("div", { className: "w-full", children: [_jsx("input", { ...register(`sections.${sectionIndex}.sectionName`), placeholder: "Section Name", className: "w-full border p-2 rounded" }), errors.sections?.[sectionIndex]?.sectionName && (_jsx("p", { className: "text-red-500 text-sm mt-1", children: errors.sections[sectionIndex].sectionName?.message }))] }), sectionCount > 1 && (_jsx("button", { type: "button", onClick: () => removeSection(sectionIndex), className: "ml-4 text-red-500 cursor-pointer", children: "\u274C Remove Section" }))] }), itemFields.map((item, itemIndex) => (_jsxs("div", { className: "grid grid-cols-6 gap-2 items-end", children: [_jsxs("div", { children: [_jsx("input", { ...register(`sections.${sectionIndex}.items.${itemIndex}.title`), placeholder: "Title", className: "border p-1 rounded w-full" }), errors.sections?.[sectionIndex]?.items?.[itemIndex]?.title && (_jsx("p", { className: "text-red-500 text-xs", children: errors.sections[sectionIndex].items[itemIndex].title?.message }))] }), _jsx("input", { ...register(`sections.${sectionIndex}.items.${itemIndex}.description`), placeholder: "Description", className: "border p-1 rounded" }), _jsxs("div", { children: [_jsx("input", { ...register(`sections.${sectionIndex}.items.${itemIndex}.unit`), placeholder: "Unit", className: "border p-1 rounded w-full" }), errors.sections?.[sectionIndex]?.items?.[itemIndex]?.unit && (_jsx("p", { className: "text-red-500 text-xs", children: errors.sections[sectionIndex].items[itemIndex].unit?.message }))] }), _jsxs("div", { children: [_jsx("input", { type: "number", ...register(`sections.${sectionIndex}.items.${itemIndex}.quantity`, { valueAsNumber: true }), placeholder: "Qty", className: "border p-1 rounded w-full" }), errors.sections?.[sectionIndex]?.items?.[itemIndex]?.quantity && (_jsx("p", { className: "text-red-500 text-xs", children: errors.sections[sectionIndex].items[itemIndex].quantity?.message }))] }), _jsxs("div", { children: [_jsx("input", { type: "number", ...register(`sections.${sectionIndex}.items.${itemIndex}.price`, { valueAsNumber: true }), placeholder: "Price", className: "border p-1 rounded w-full" }), errors.sections?.[sectionIndex]?.items?.[itemIndex]?.price && (_jsx("p", { className: "text-red-500 text-xs", children: errors.sections[sectionIndex].items[itemIndex].price?.message }))] }), _jsxs("div", { className: "flex items-center space-x-1", children: [_jsx("input", { type: "number", ...register(`sections.${sectionIndex}.items.${itemIndex}.margin`, { valueAsNumber: true }), placeholder: "Margin %", className: "border p-1 rounded w-20" }), itemFields.length > 1 && (_jsx("button", { type: "button", onClick: () => removeItem(itemIndex), className: "text-red-500 cursor-pointer", children: "\u2716" }))] }), errors.sections?.[sectionIndex]?.items?.[itemIndex]?.margin && (_jsx("p", { className: "text-red-500 text-xs col-span-6", children: errors.sections[sectionIndex].items[itemIndex].margin?.message }))] }, item.id))), _jsx("button", { type: "button", onClick: () => appendItem({
                    title: "",
                    description: "",
                    unit: "",
                    quantity: 0,
                    price: 0,
                    margin: 0,
                }), className: "text-sm bg-gray-200 px-3 py-1 rounded cursor-pointer hover:bg-gray-300", children: "\u2795 Add Item" })] }));
};
export default SectionField;
